{"version":3,"sources":["../node_modules/bnc-onboard-staging/dist/esm/index-d8984737.js"],"names":["ethUtil","fees","BN","N_DIV_2","Transaction","data","instance","Constructor","TypeError","_classCallCheck","this","fields","name","length","allowLess","Buffer","alias","allowZero","defineProperties","Object","defineProperty","enumerable","configurable","get","getSenderAddress","bind","sigV","bufferToInt","v","chainId","Math","floor","_chainId","_homestead","prototype","toCreationAddress","to","toString","hash","includeSignature","undefined","items","raw","slice","r","s","rlphash","getChainId","_from","pubkey","getSenderPublicKey","publicToAddress","_senderPubKey","verifySignature","Error","msgHash","cmp","ecrecover","e","sign","privateKey","sig","ecsign","assign","getDataFee","cost","i","iaddn","txDataZeroGas","txDataNonZeroGas","getBaseFee","fee","txGas","txCreation","getUpfrontCost","gasLimit","imul","gasPrice","iadd","value","validate","stringError","errors","push","join","module","exports"],"mappings":"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","file":"static/js/83.5ef41c22.chunk.js","sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ethUtil = require('ethereumjs-util');\n\nvar fees = require('ethereum-common/params.json');\n\nvar BN = ethUtil.BN; // secp256k1n/2\n\nvar N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\n * Creates a new transaction object.\n *\n * @example\n * var rawTx = {\n *   nonce: '00',\n *   gasPrice: '09184e72a000',\n *   gasLimit: '2710',\n *   to: '0000000000000000000000000000000000000000',\n *   value: '00',\n *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',\n *   v: '1c',\n *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n * };\n * var tx = new Transaction(rawTx);\n *\n * @class\n * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.\n *\n * Or lastly an Object containing the Properties of the transaction like in the Usage example.\n *\n * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum\n *\n * @property {Buffer} raw The raw rlp encoded transaction\n * @param {Buffer} data.nonce nonce number\n * @param {Buffer} data.gasLimit transaction gas limit\n * @param {Buffer} data.gasPrice transaction gas price\n * @param {Buffer} data.to to the to address\n * @param {Buffer} data.value the amount of ether sent\n * @param {Buffer} data.data this will contain the data of the message or the init of a contract\n * @param {Buffer} data.v EC signature parameter\n * @param {Buffer} data.r EC signature parameter\n * @param {Buffer} data.s EC recovery ID\n * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3\n * */\n\nvar Transaction = function () {\n  function Transaction(data) {\n    _classCallCheck(this, Transaction);\n\n    data = data || {}; // Define Properties\n\n    var fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      \"default\": new Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      \"default\": new Buffer([0x1c])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }];\n    /**\n     * Returns the rlp encoding of the transaction\n     * @method serialize\n     * @return {Buffer}\n     * @memberof Transaction\n     * @name serialize\n     */\n    // attached serialize\n\n    ethUtil.defineProperties(this, fields, data);\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    }); // calculate chainId from signature\n\n    var sigV = ethUtil.bufferToInt(this.v);\n    var chainId = Math.floor((sigV - 35) / 2);\n    if (chainId < 0) chainId = 0; // set chainId\n\n    this._chainId = chainId || data.chainId || 0;\n    this._homestead = true;\n  }\n  /**\n   * If the tx's `to` is to the creation address\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.toCreationAddress = function toCreationAddress() {\n    return this.to.toString('hex') === '';\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.hash = function hash(includeSignature) {\n    if (includeSignature === undefined) includeSignature = true; // EIP155 spec:\n    // when computing the hash of a transaction for purposes of signing or recovering,\n    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),\n    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0\n\n    var items = void 0;\n\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      if (this._chainId > 0) {\n        var raw = this.raw.slice();\n        this.v = this._chainId;\n        this.r = 0;\n        this.s = 0;\n        items = this.raw;\n        this.raw = raw;\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    } // create hash\n\n\n    return ethUtil.rlphash(items);\n  };\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getChainId = function getChainId() {\n    return this._chainId;\n  };\n  /**\n   * returns the sender's address\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderAddress = function getSenderAddress() {\n    if (this._from) {\n      return this._from;\n    }\n\n    var pubkey = this.getSenderPublicKey();\n    this._from = ethUtil.publicToAddress(pubkey);\n    return this._from;\n  };\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {\n    if (!this._senderPubKey || !this._senderPubKey.length) {\n      if (!this.verifySignature()) throw new Error('Invalid Signature');\n    }\n\n    return this._senderPubKey;\n  };\n  /**\n   * Determines if the signature is valid\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.verifySignature = function verifySignature() {\n    var msgHash = this.hash(false); // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n\n    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n\n    try {\n      var v = ethUtil.bufferToInt(this.v);\n\n      if (this._chainId > 0) {\n        v -= this._chainId * 2 + 8;\n      }\n\n      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);\n    } catch (e) {\n      return false;\n    }\n\n    return !!this._senderPubKey;\n  };\n  /**\n   * sign a transaction with a given a private key\n   * @param {Buffer} privateKey\n   */\n\n\n  Transaction.prototype.sign = function sign(privateKey) {\n    var msgHash = this.hash(false);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n\n    if (this._chainId > 0) {\n      sig.v += this._chainId * 2 + 8;\n    }\n\n    Object.assign(this, sig);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getDataFee = function getDataFee() {\n    var data = this.raw[5];\n    var cost = new BN(0);\n\n    for (var i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);\n    }\n\n    return cost;\n  };\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getBaseFee = function getBaseFee() {\n    var fee = this.getDataFee().iaddn(fees.txGas.v);\n\n    if (this._homestead && this.toCreationAddress()) {\n      fee.iaddn(fees.txCreation.v);\n    }\n\n    return fee;\n  };\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function getUpfrontCost() {\n    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));\n  };\n  /**\n   * validates the signature and checks to see if it has enough gas\n   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean\n   * @return {Boolean|String}\n   */\n\n\n  Transaction.prototype.validate = function validate(stringError) {\n    var errors = [];\n\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {\n      errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);\n    }\n\n    if (stringError === undefined || stringError === false) {\n      return errors.length === 0;\n    } else {\n      return errors.join(' ');\n    }\n  };\n\n  return Transaction;\n}();\n\nmodule.exports = Transaction;"],"sourceRoot":""}